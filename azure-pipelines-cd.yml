# Deploy to Azure Kubernetes Service

# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - main
name: Green-Deploy
resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ee60ce10-c61d-49a3-b1c4-893cafd89b91'
  imageRepository: 'springapp'
  containerRegistry: 'lottechemicalacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  # tag: '$(Build.BuildId)'
  imagePullSecret: 'lottechemicalacr2257d2fa-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  # k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'


stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

#     - upload: manifests
#       artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  # dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy Green
    pool:
      vmImage: $(vmImageName)
    environment: 'joonhyeok95phpnewapp.azdev'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            fetchTags: true
            displayName: git clone

          - script: |
              echo "입력된 TAG 교체 : $(MY_TAG)"
              sed -i "s/{{SED_DATA}}/$(MY_TAG)/gi" kubernetes/deploy-green.yml

# image pull secret 생성
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

# 기존 deployment-green 삭제하기
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'aks-lottechemical-poc-azdev'
              namespace: 'azdev'
              command: 'delete'
              arguments: -f kubernetes/deploy-green.yml
              
# deploy green 
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                kubernetes/deploy-green.yml
              imagePullSecrets: |
                $(imagePullSecret)
              # sed 명령어 실행 후 이미지태그가 안먹음...
              # containers: |
              #   $(containerRegistry)/$(imageRepository):$(MY_TAG)

# 서비스 교체 테스트 완료
- stage: Service
  displayName: Service
  dependsOn: Deploy
  lockBehavior: sequential
  jobs:
  - job: ServiceChange
    displayName: Service Change
    pool:
      vmImage: $(vmImageName)
    steps:
        
    - task: DownloadSecureFile@1
      name: sample
      inputs:
        secureFile: 'aks.config'
    - script: |
        echo "파일경로 : $(sample.secureFilePath)"
        kubectl get svc -n azdev --kubeconfig $(sample.secureFilePath)
        kubectl patch svc spring-app-svc --type=json -p='[{"op": "add", "path": "/spec/selector/vers", "value": "$(MY_TAG)"}]' -n azdev --kubeconfig $(sample.secureFilePath)
        kubectl patch svc spring-app-svc-preview --type=json -p='[{"op": "add", "path": "/spec/selector/vers", "value": "$(MY_TAG)"}]' -n azdev --kubeconfig $(sample.secureFilePath)
        kubectl get svc -n azdev --kubeconfig $(sample.secureFilePath)

#   - deployment: DeployPullRequest
#     displayName: Deploy Pull request
#     condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
#     pool:
#       vmImage: $(vmImageName)

#     environment: 'joonhyeok95phpnewapp.$(k8sNamespaceForPR)'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - reviewApp: azdev

#           - task: Kubernetes@1
#             displayName: 'Create a new namespace for the pull request'
#             inputs:
#               command: apply
#               useConfigurationFile: true
#               inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

# # image pull secret 생성
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               namespace: $(k8sNamespaceForPR)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

# # 변수 k8sNamespaceForPR 에 배포
#           - task: KubernetesManifest@0
#             displayName: Deploy to the new namespace in the Kubernetes cluster
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespaceForPR)
#               manifests: |
#                 kubernetes/deploy.yaml
#                 kubernetes/service.yaml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(MY_TAG)

# # 배포된 서비스 url을 메시지로 출력하는 예제
#           - task: Kubernetes@1
#             name: get
#             displayName: 'Get services in the new namespace'
#             continueOnError: true
#             inputs:
#               command: get
#               namespace: $(k8sNamespaceForPR)
#               arguments: svc
#               outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

#           # Getting the IP of the deployed service and writing it to a variable for posing comment
#           - script: |
#               url="$(get.KubectlOutput)"
#               message="Your review app has been deployed"
#               if [ ! -z "$url" -a "$url" != "http://:" ]
#               then
#                 message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
#               fi
#               echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
