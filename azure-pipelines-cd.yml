# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ee60ce10-c61d-49a3-b1c4-893cafd89b91'
  imageRepository: 'springapp'
  containerRegistry: 'lottechemicalacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  # tag: '$(Build.BuildId)'
  imagePullSecret: 'lottechemicalacr2257d2fa-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  kubeconfig: "
              apiVersion: v1
              clusters:
              - cluster:
                  certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU2VENDQXRHZ0F3SUJBZ0lSQUlqVnR0Z0YwaXovSGYwa1Y3Skl1Znd3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdJQmNOTWpJeE1URTBNRFV5TURBd1doZ1BNakExTWpFeE1UUXdOVE13TURCYQpNQTB4Q3pBSkJnTlZCQU1UQW1OaE1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBCnVxYmZsUk9aTWtscGtKVmdsY21scTlSV2ROT0ZnK3VOZjdrbnhCUU1XYXV3bDU5V3VhWC8rSFRaVUN0VkM4SFIKVFpuQzZBMlRnZ3RJcDVmd2F3UGlCLzR1clZlQUVNSlNjTHBCYzRiS09VOXlWemJNT0FKa3pGYU5XVjRZVzN3QgpncjJVOHJPSHJYbUJxTTRqTjR3U2JTS1o3bGVtUTVxaVJoQTF1allxZEVyVnFhVld6L1hZL01Zc0hZdURCdDBtCm02V2RHaWhsRzdvVEIwaEFFREtqSkpnZUVyMzltTnREMnBwMnplYTlZSTIzYUdEdytrRzFsL2gwNTlneTFCc0QKNnNCdnBsWkZoS0RlUTRrUEMvZzVYS243dkJxZjZNZ3l3cTZXaEptQjN5TnpFSjYvd0VjYlNmUngrQkNDQzFmdwpTcmIwNVhYbUtrMmFhL1NFdHR6Q0JKNEtNdSs3cHB4WElxUXhDTzU3QkRwZkFRMElKSEo1U2lRVURGTWhLMkFMCk03RHlXOVpkL2REOXRnTEtDWG1qZkNsK0wxam1TSWFvQ3Vld0RSQyt2bjFDemFwcjBDMCsxTFE2dFNvRkpXUHYKd3pscEg2ZFlpTUtNRm5VbGNMeW92bnJZSWRPbXkreFF6eFcxUW5QaGFJRWZTbCtGTnF4L3hTaVpVOG4zZ1hzeQozNHVVdmZVQXJZYmRmaUN0VWsyc2hnZS8zQVJFQmpad3Yyc2hmcXRFMlR2djAyWFh2TWhUa0tmZFdZZGxFK0Z6Ckw5WTIrT0UzcHkrZ0h4NHU4TnBvS08xT1lGY0dIaGJoaDZrdGNjUHV5THVQczlIZ25aMGk3a0w5eVdmWG1MRUwKSmlPQng0Tll5Uk5TdEtERDJNbmdjRjVQeDB0NDhvVVJxR29Yd1ZCSHZHVUNBd0VBQWFOQ01FQXdEZ1lEVlIwUApBUUgvQkFRREFnS2tNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGSERIVGVEVW45T05ndlFtCnRZemlnMlltdnZtdE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQitUSGRzRlN5VDlSMmtzTGVPckM5ZTF4aWEKWTlpTlNCbzRFdjRWK3R6OGx0UUNKc1lJR2R1cU9JV1ZWVERhQkpzSEJBWWNueW5zZDZISXd1ZTRPOXRTWmVETgpsbTRLRWVSemtaTFhzcnVZMm5rZENQQ2xPVTJQZm16QnZiWlZFQUZWQjlDQ2VzTzZSNHE5NnE0MTNYbk5RdGc3CnpCTkYyQjdsQ2VYUWVYdXdYZ2sybEtUc1U1MktvbmVsSGhnZm1HRW1Vb1lDektYQWo2ekJwenB0UDdHaUtTcFAKWHQvajdNZHlWeWNhQ0FXVFQ3dEZDQ2c4TTgxNGFieFkxd21mOEdZOWs3MEZzejZIR1hKYjlQdWptb1NxT3BSNwo0MlNQdDRiRWY2NjBjR05uNS8weml1bHRyUW96U0paOW1qaXUwY21odzlYQjF3UGJtUDkzT1M3WFBlY0RTM0VqCnVIcmFVUEJmNjVORElBK1N0dGJVcTlabFhoRVlSamVVNy9rZzVQNW5wcEV0VVowNE45Y3kwL2p5eEdXN2VNZHIKM1RYY0ZTTU1ydEJsZ3M2TUhQSUNuOGZrUktzRDFUUmxENlRwMjVDMHZWOHB1ZFZReHR3UVRCODh3OTdna2x5MQphRFN6K0M2QnZlNlRsend2T1J5MlIyNmxEbEJjMVc4SGtzcmNDcVl1N3l3d2hEZlJ0aVJGM3RpeS8xN2I1Q0tpCjdsK1R5b3lic1YvTTJ3ODczK2s3K1QxWG5qVldhMnlDU1Y1bDl2NlZPb1o2VUhNakltOWNUd2owbWFDcWNiaTIKMUlva1d4YjNDNGdoTU9LZmJ6WE85Tzd0V2hROHc1dHZORkVsbkhBWlNTUmtYWmJ6a3hEQlB6SVlRNnRKMWlQcQprc1graStpa3RTczNJaHpGZWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
                  server: https://aks-lottechemical-poc-dns-305207bd.hcp.eastus2.azmk8s.io:443
                name: aks-lottechemical-poc
              contexts:
              - context:
                  cluster: aks-lottechemical-poc
                  user: clusterUser_aks-lottechemical-po_group_aks-lottechemical-poc
                name: aks-lottechemical-poc
              current-context: aks-lottechemical-poc
              kind: Config
              preferences: {}
              users:
              - name: clusterUser_aks-lottechemical-po_group_aks-lottechemical-poc
                user:
                  client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZIakNDQXdhZ0F3SUJBZ0lSQU5QODJPRWl4NE51S3ZOWnVvMkpzMWt3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpJeE1URTBNRFV5TURBd1doY05NalF4TVRFME1EVXpNREF3V2pBdwpNUmN3RlFZRFZRUUtFdzV6ZVhOMFpXMDZiV0Z6ZEdWeWN6RVZNQk1HQTFVRUF4TU1iV0Z6ZEdWeVkyeHBaVzUwCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBMzNMMjB4UTUxNGFndHlpS2ZQSmYKRWp2SW50TURrdDczN1JFL0hBT1h3Tlp5YUNTdmNWMmVVRjZWK20vTGREa3hneVBHY3d1YXFCR3VzTjRKKzZpRgpvcW12b0hiV3Q3ZEZlTlNnY3piQVlIcDBkZVEra25FN3R3T3RBWjgxSmYwUVVHRnFQSGtmMkZoTFlWQmNsZ2piCjI4UkIyR2xlQkhBM2dSNjNSWDdxK3hONnRCOTdwdFd6U3F2NzA2VEkxN3F2SDF4SjdRRmJZVlhpSkdQZlRJK2IKMzdyWDY0WFJOQk5oejh1UDMyWU96dHM0akNvYmtEVVo3Tk1vTitqcTZmeUJxckVmeDlBL0lZSjRJcnVJR0g4WApVZ3lqTTNJV0F0YWtjZFczMVFXZTc3am91YTNvQjRQUFJHR3lHM2VxSVAwM1VrSUF3ei9VLyt1WVpZbk9CNVRvCjNqa2dZcnFYWndhU2p4S21ZZGZ6SUJQRXdxcWM2QTFYWlRsMWZnQVY1SFlLRmNuWXpZK1NFUklrbDM5Z3BkZzQKK0NoNEdFMTJhQWd4OWxKaUtIQTQ2OWtrVEU0ZEV6ZTNaRk5DWjF1a0R4bndEVFZqK0F6djg4QW9sVGhiOEJhOApabUVrSnEvQUt0NTVJS2EwakdYVk5aVGo4VjhpVzlKWSt6bml5bW1abGFHNmphNStSV3F4VjNzcW8xcHVFWTlLCmpPK1pzeTZFYWNzYzg3RTdKMVozbjF1bVlTd1NmU3BzTGJ5NmlhR01SQVY5V3VqeUNUSVR6M1VyRmxnS3dTMW0KQjN3UUFtaUJXZEpTeUFUT1IwUkdMcC9VbWIzY3N1TEJWczRhTmNlZUtNWUZHUElnamlFRDVXbnpKN0ZtN0EvSgpXMlFITmtTOW9sUmJJb1UxRlFqVjhQVUNBd0VBQWFOV01GUXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkCkpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVY01kTjROU2YKMDQyQzlDYTFqT0tEWmlhKythMHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRVoza1lHUFZSNm5ZcW5ZV08wNAprMERKeFNXYWowcGg5aDR6elhzZ3llYjlzbk5YY1hNUjlmKzltYW1pWmRxblZwUTZMU2NrakZsVG5GSXZZZVJOClhHN24ybVpCTGtCcVg4WGRrMnJEL2ZQd3lYTGRBWkoyVEM2cXZwNEZBVTBxN3J3RXBVN3VxNVRCOXgyT3V3dEcKT2VXWWdWZURHekgyd0cvK1J5c0JlWXRRRnYvTkNlbk5iRHNwTVZIYVJGK0RUWGNPVWJSQ0NqbkJ5T095ejdsYwpuOGhQb0FORFp5dThNemtmdVBoTjVrdkppZWVoMkdiRGY0WTlkQlRjUGNoSXJ2MnNBbzNaL1BhNkNHYXU2azduCkU2YzBPcUl6cjloeG0xRjFMMmZpVzhESW5SNmRqUzNiRFl1OUVHTHVJS2J2Q015cVQvdjI5M05tazBjV1pjRjYKcnc1KzRMY1YyZnJXanJ0RVZnME1oZGUyMG5NV045QTdxWjRMYnR5Qkczc0lFajYvQWxJRHdDQThUN013Y2N6bQpFd3JVNHhlODJiSU1ISzJLc1A0ZEdBMm83VXN4VTJDU3dhRVFiWFU4cUJlaVVaS0V0Y3NFZ2tacmhUTXlPZnZlCmxnNWN5OUNRVWhvWFFYWmRFd2pDOE94RVlKeFBvdW41dkpjNUxHcXBJMHRhUHA4MXM4aXFncVBaTWNYRkdEM1oKVjZWQ0FOaGp0RUllMFExU0Q2QXJtU051bEE0Z0EzaGM5NWp1M3RsckdYcVh4K3kxSktHSkViN3VqK0NVbm9XWQpoZDV1SmZoWmZocTNaMFZHWUNDeVBPbjg4L3dRZ1dQK0ZGZWtlUHVydUtnNytBbUM5aUVGTW82YkNZMytPMktqCnZnVlBUSUFVbVYyRmNnbldOU3kveWRCQQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
                  client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBMzNMMjB4UTUxNGFndHlpS2ZQSmZFanZJbnRNRGt0NzM3UkUvSEFPWHdOWnlhQ1N2CmNWMmVVRjZWK20vTGREa3hneVBHY3d1YXFCR3VzTjRKKzZpRm9xbXZvSGJXdDdkRmVOU2djemJBWUhwMGRlUSsKa25FN3R3T3RBWjgxSmYwUVVHRnFQSGtmMkZoTFlWQmNsZ2piMjhSQjJHbGVCSEEzZ1I2M1JYN3EreE42dEI5NwpwdFd6U3F2NzA2VEkxN3F2SDF4SjdRRmJZVlhpSkdQZlRJK2IzN3JYNjRYUk5CTmh6OHVQMzJZT3p0czRqQ29iCmtEVVo3Tk1vTitqcTZmeUJxckVmeDlBL0lZSjRJcnVJR0g4WFVneWpNM0lXQXRha2NkVzMxUVdlNzdqb3VhM28KQjRQUFJHR3lHM2VxSVAwM1VrSUF3ei9VLyt1WVpZbk9CNVRvM2prZ1lycVhad2FTanhLbVlkZnpJQlBFd3FxYwo2QTFYWlRsMWZnQVY1SFlLRmNuWXpZK1NFUklrbDM5Z3BkZzQrQ2g0R0UxMmFBZ3g5bEppS0hBNDY5a2tURTRkCkV6ZTNaRk5DWjF1a0R4bndEVFZqK0F6djg4QW9sVGhiOEJhOFptRWtKcS9BS3Q1NUlLYTBqR1hWTlpUajhWOGkKVzlKWSt6bml5bW1abGFHNmphNStSV3F4VjNzcW8xcHVFWTlLak8rWnN5NkVhY3NjODdFN0oxWjNuMXVtWVN3UwpmU3BzTGJ5NmlhR01SQVY5V3VqeUNUSVR6M1VyRmxnS3dTMW1CM3dRQW1pQldkSlN5QVRPUjBSR0xwL1VtYjNjCnN1TEJWczRhTmNlZUtNWUZHUElnamlFRDVXbnpKN0ZtN0EvSlcyUUhOa1M5b2xSYklvVTFGUWpWOFBVQ0F3RUEKQVFLQ0FnRUFrZjdIam5xMG9FRnlXTG5BWW9ycDJ6djhoT2xTZUcvK2hZS3pQVmFMbkkrQkNOS1BYdjdRSmFybgpTMDRvSExRUnlhRmlWR0RNbCt1VnZESVhTN3A4Tmgrd2hLT2cvMEJiditzTk9yb1hUL0l5amFTbnpYNzJpVWw1CmpJbTliQ2pBdEFReUtYanFlYXlXOCtwUjFDWE5vUFhHSCtRWWJjWDBQZ1VYc2V5UEU2VlNrc1hQUU41MzJ0NHMKRjhpZkFYVVVYdVVwMkJUKzQ4WDlqOUZCWVFDajA3Wjh4WUlWZ25UM2Y1RjlXM1dQVDFDa3pjL2xXbitYaE1raQppZ1ZCRjhqSDRBTUN4TWNudUhsS2pVY0NVUjhZMlo4d01yamo4TTdWZXhzc2xaNnFqZTYvQURMRVc4U2ZkQXB4CkdNbEMrM0wyNW1RQm81RGRWcWxVVldPSW5pT0pVZy9xek1MdjAwcC8vazV2K0NndVVnRnY3SG9lRFQ0YlZBT0cKNDJMWmM1bUc3V1kyRTdmUktRUUFaQ3pqTTc5TUtubTNWbDRaeFhwbGVsVjFCWmhQeUtXMmRlSGNHVHRFcXR0NQpWaGRtU2o4eFQwRzVaWEFyOHlPSmdjdEsvUzR6UkUwYU5ET2ZQTkhOaXBIR05QU2RoYzVtWEZOeWNNaFQyVWtiClZuZkJ4RWt1bDY0UDJ6M21VWWdRSEtzRFdOSm9RNzJlRDNUaCtoUjRheDIxc2kxOUhodzcxZnBjeHpFanp1d0oKU1NuQ2ptc0lzMlhYMHJWS3RqYkdsL1hDZC9QTXk2ZTMvbGVRMWJERy91QUJ4STVVMTZYTU5GZnhkR2x4bGxmZwphd016eTBTT0pOd1VFSFVqcjV5ZmNhNnpydGxnaFhtWG4vMVlicUtORDBxWmU1aFY0Z0VDZ2dFQkFPSFF5MWtQCkhDL3E1QU4wNjR3cm05TFVPWVhBOHZ0SWhCcGYrRmhma29CYTI5SlBCRUwzd0hjNUt2OERQTy9YTjFmamhsK1EKOEVIMjZlNUo5WXhZc0FPalhJa2VhOFVVRklFS21SZk5XSmtDLytFdzcycjRBcTNsTGJJdE1IZFNoMHVsODc0dApxOGZWQ0s5cGtycTJDT0FrMks5Mm5iK2w1Qnlaa2lLeHBzVXFMczRTRzZVbjllSDhUUFpCNEJuQnVJSWY0UFRRCk4yQ2poWnhtaGZkRE1QMDlkNDhtQ3BjRVdocllzRDBVWmlZdlYydEIrL2tQQkt2bUVTTG5jakM2RUtCaElkbGYKZFYvaWtiZ0drdjdWeFZYdGZRUUF1VkZ5VlNpOThscU9Gd0M3NE5hbzJhWGZqL1FqdmZ2UEc2c1grYkxMZDBySQpwcjBtSGo5N3NJeDgrTlVDZ2dFQkFQMVJNSVFvRElFcW5lUmZtY2lZajJ4SXhHUU1oOVNHR2luTjI3QUJYeXFYClY3dXZPV1dpdENjR0VDTS9URmJqcE16V3czNlplTFM3Vjh4ak9RMVBqRVdlTzlhVmFldTBGalliR1hobVNIZFcKenk2YVFIWnZ4M2JGTFpOYXhYK2E3Wmo3UE9HSGZrc0Z4OE1uMUVZZUxmOXo5MUMzTEFtSlpnQk1aeWRvNXJ5eApkbWQzelRDWEx0ekd0cWFPMXZVMGhSZnNySXNOQ3pyazh6amRQWGE5am9adUtSRllQaXNya0JtWVFpcG9GUlNSCkRkcTk4VUt5QjAzRngveEhtWSsyL2U4Qi9YbE54R1IrQ1ZqeTBWL0NsNUlOYU9RelNIRlk5TGs5aWx0K09nb3kKcU9XSkx0ZVJvL2ZjU2ZCTE8yRGs4bnF6NTVtL2lQUG1XaktXbTcyQko2RUNnZ0VCQUlocVlSM1pFZmNrbUVBNgpWcjJqN291THA0QlUwclRZMXUwMEFzd29XRkZ3RWhIWHFFUm9kUDNSTEZkSDluMFJiNTZKbGJpUHo0U2FEREhtCnZnN2QyTjhweGhJVHJaa3VDMEQxVFF6akFWM1dRUXdpU3RBOUtTa3lKTXZabnNqR3MzTVF1dEd0dDNPT0Q2UWcKVEFLOVMxbFZDUTNldzJkdWFRS2FCMzBzQXdwaTlFbUxDT1paNEtGM2tHckgyd0RVVllsT2h0QitKS1lkd3U1Nwp4UHhkdSsrUVBYVGR6MUh4MEJrZHhFSHgyOCsvazdqNDhLWkIyMW1aTDhyOU5LK1pCOGhMUlc2U3kwNTBpZ0U0Ci8zNHhWL2dUOHcwQy92RGo5K3dYNjV1bThPQ0JuMDh1UytWM3kvZjV5NkNlT2lHKzV4cUs3ZkxnaWxJRUFBdnIKeGZqbzJrMENnZ0VBUDNlc0ZEQ0VrWWcvN3d3VTE3R0JuYnZObU5PYTVLQ0V4WnlTUWxMVnFUSXFCUmd0NVUwUwpuZ1JpM3JIcFNvdldxb3ZVaDAra2NvUE54NlBFazVVdXEvS3RRMkpFRzQ0UFVwY1BscDdwNFJ5YTVDNDVvSEw1CklzVGNXbU1Qd0p6c2tydS8wVEhGYnI2UUFsRmtXZjBOd1VjbzI4eEkrRXE0aDdLYzFiN3VzTEExM2s2aDFsN0sKbXY0ZW5UU0Vud0w5cGJUaXRpUWFnRE1FeldhQkU5TUNkcVA3SGlGaDBpY2ovNFdxYmoyTnFvMTlUeVR2NGFvQgpNbmN2V0FJSWMzMkJ1ZlJoc1piT2NlOHlJRnNXSWt2NjlkanVRdDZtYzkrNTBQK2VQcll0aklpTTBKWENhcmhPCndMY3N2MHZhSUxpOEdBb2pLTjVZVGVPVkRiKzJYWkNTZ1FLQ0FRRUF4SGJPN3h3SU5kaTAzTE5NSGFXdmdrdGwKVjIwSE54Q0Vuclprc0tpTkhvaThtZmFYSElsd3hBbVpLM1V6bVVMMVE5WjlPOFVneHZvUjEzS1B2WW1OaU9JbQozTU9WZjIwamUwSnluSjBxclV0anNXLzhaNkFVMWhjZWRvb0E4VHZBWjU4K1hTUUEyOTNKNHlBb3BpOHhQR1lICnRJK040TEtCZFdQcGF2cmFKZW52dVpPS2F6YmRxVXpnTW5kY2JUemhSenYxWjNqSGY2aVMrbHJ2N0I1UTBHMWsKRkZ4clJuMTB6SlRjZWhZcDZRTXE5NWxmNTYvcjlCUDMzVHdMNU1BR1RzTGZmenpseDFVRllPZ3FPakc0R1ZjcQpZenFseFdodEtVOEZZM3BPcm1FUEM5U0VzNzNUcjhLOURlTERGRmRSS1lyTzVDMDF0WlU3VjUwaHgyNUJRZz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
                  token: 6ceccb6490610106db5baadc4cce2b91a81a5ab6dfa6e488c0e8048d872fef93634c2e5a2799af9a995b0a8110b001a14aa1eb3c92c6fbf1e9487e94c732a4fa
    "

  # Name of the new namespace being created to deploy the PR changes.
  # k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

#     - upload: manifests
#       artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  # dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'joonhyeok95phpnewapp.azdev'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            fetchTags: true
            displayName: git clone

          - script: |
              echo "입력된 TAG 교체 : $(MY_TAG)"
              sed -i "s/{{SED_DATA}}/$(MY_TAG)/gi" kubernetes/deploy-green.yml

# image pull secret 재생성
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
# 기존 deployment-green 삭제하기
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'aks-lottechemical-poc-azdev'
              namespace: 'azdev'
              command: 'delete'
              arguments: -f kubernetes/deploy-green.yml
              
# deploy blue&green 
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                kubernetes/deploy-green.yml
              imagePullSecrets: |
                $(imagePullSecret)
              # sed 명령어 실행 후 이미지태그가 안먹음...
              # containers: |
              #   $(containerRegistry)/$(imageRepository):$(MY_TAG)

- stage: Service
  displayName: Service
  dependsOn: Deploy
  jobs:
  - job: ServiceChange
    displayName: Service Change
    pool:
      vmImage: $(vmImageName)
    steps:
    
    # - task: Kubernetes@1
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: 'aks-lottechemical-poc-azdev'
    #     namespace: 'azdev'
    #     command: 'get'
    #     arguments: 'svc'
    #     secretType: 'dockerRegistry'
    #     containerRegistryType: 'Azure Container Registry'
        
    - script: |
        kubectl get svc -n azdev --kubeconfig $(kubeconfig)


#   - deployment: DeployPullRequest
#     displayName: Deploy Pull request
#     condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
#     pool:
#       vmImage: $(vmImageName)

#     environment: 'joonhyeok95phpnewapp.$(k8sNamespaceForPR)'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - reviewApp: azdev

#           - task: Kubernetes@1
#             displayName: 'Create a new namespace for the pull request'
#             inputs:
#               command: apply
#               useConfigurationFile: true
#               inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

# # image pull secret 생성
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               namespace: $(k8sNamespaceForPR)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

# # 변수 k8sNamespaceForPR 에 배포
#           - task: KubernetesManifest@0
#             displayName: Deploy to the new namespace in the Kubernetes cluster
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespaceForPR)
#               manifests: |
#                 kubernetes/deploy.yaml
#                 kubernetes/service.yaml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(MY_TAG)

# # 배포된 서비스 url을 메시지로 출력하는 예제
#           - task: Kubernetes@1
#             name: get
#             displayName: 'Get services in the new namespace'
#             continueOnError: true
#             inputs:
#               command: get
#               namespace: $(k8sNamespaceForPR)
#               arguments: svc
#               outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

#           # Getting the IP of the deployed service and writing it to a variable for posing comment
#           - script: |
#               url="$(get.KubectlOutput)"
#               message="Your review app has been deployed"
#               if [ ! -z "$url" -a "$url" != "http://:" ]
#               then
#                 message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
#               fi
#               echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
